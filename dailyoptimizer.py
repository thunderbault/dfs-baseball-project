#create optimized daily fantasy baseball lineup using data from SQL generated by complete_newbr
#By Adam Thibault


from BeautifulSoup import *
from main_OO import Player, Batter, Catcher, FirstBaseman, SecondBaseman, Shortstop, ThirdBaseman, Outfielder, Pitcher
import sqlite3
import urllib
import re
import brscraper
import time 
start_time = time.time()

def daily_starters(object):

    call_starters_url = urllib.urlopen(object)
    starters_website = call_starters_url.read()    
    soup = BeautifulSoup(starters_website)
    call_starters_url.close()
    for a in soup.findAll('a'):

        check_player_name = a.get("data-bref")
        if check_player_name:
            player = a.text.lower()
            if "." in player:
                player = player.replace(".", "")
            player_info[player] = []
            player_id = a.get("data-bref")
            if player_id:
                player_info[player].append(player_id)
                player_info[player].append(a.parent.text.split("(")[1][0])
            if "(L) " in a.parent.text or "(R) " in a.parent.text or "(S) " in a.parent.text:
                player_info[player].append(a.parent.text.split(".")[0])
            else:
                player_info[player].append(0) 

def extract_dk_info(object):
    import csv
    with open(object, 'rb') as csvfile:
        file = csv.reader(csvfile)
        for row in file:
            player_full_name = str(row[2]).lower()
            if "." in player_full_name:
                player_full_name = player_full_name.replace(".", "")
            #placeholder for dealing with tough characters (accents, etc)
            if '\xed' in player_full_name:
                player_full_name = player_full_name.replace('\xed', 'i')
            if '\xc1' in player_full_name:
                player_full_name = player_full_name.replace('\xc1', 'a')
            if '\xe9' in player_full_name:
                player_full_name = player_full_name.replace('\xe9', 'e')
            if '\xf3' in player_full_name:
                player_full_name = player_full_name.replace('\xf3', 'o')
            if '\xfa' in player_full_name:
                player_full_name = player_full_name.replace('\xfa', 'u')
            if '\xf1' in player_full_name:
                player_full_name = player_full_name.replace('\xf1', 'n')
            if '\xe1' in player_full_name:
                player_full_name = player_full_name.replace('\xe1', 'a')
            if player_full_name in player_info:
                if row[6] == "Postponed":
                    continue
                contest_players.add(player_full_name)
                player_info[player_full_name].append(row[7])
                player_info[player_full_name].append(row[0].split('/'))
                player_info[player_full_name].append(row[5])
                teams = row[6].split("@")
                home_team = teams[1]
                home_team_clean = home_team[:3].strip()
                if home_team_clean == row[7]:
                    player_info[player_full_name].append(True)
                    player_info[player_full_name].append(teams[0])
                else:
                    player_info[player_full_name].append(False)
                    player_info[player_full_name].append(home_team_clean)
            else: continue

def constructPlayerList():
    starters_url = 'http://www.baseballpress.com/lineups'
    daily_starters(starters_url)
    csv_from_draftkings = 'DKSalaries.csv'
    extract_dk_info(csv_from_draftkings)
    for player, info in player_info.iteritems():
    # build a position to list of players map
    # A position is a key to a list of players that play that position
        if player not in contest_players:
            continue
        if len(info) > 3:
            if "SP" in info[4] or "RP" in info[4]:
                new_player = Pitcher(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                if pitchers_hitters.get("Pitcher") is None:
                    pitchers_hitters["Pitcher"] = []
                pitchers_hitters["Pitcher"].append(new_player)
            else:
                for position in info[4]:
                    if position == "C":
                        new_player = Catcher(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if position == "1B":
                        new_player = FirstBaseman(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if position =="2B":
                        new_player = SecondBaseman(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if position == "SS":
                        new_player = Shortstop(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if position == "3B":
                        new_player = ThirdBaseman(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if position == "OF":
                        new_player = Outfielder(player, info[0],info[1],info[2],info[3], info[5], info[6], info[7])
                    if pitchers_hitters.get(position) is None:
                        pitchers_hitters[position] = []
                    pitchers_hitters[position].append(new_player)
            player_list.append(new_player)
            
home_stadium = {"LAA":"Angel Stadium of Anaheim", "SF":"AT&T Park", "STL":"Busch Stadium", "ARI":"Chase Field", "NYM":"Citi Field", "PHI":"Citizens Bank Park", 
"DET":"Comerica Park", "COL":"Coors Field", "LAD":"Dodger Stadium", "BOS":"Fenway Park", "TEX":"Globe Life Park in Arlington", "CIN":"Great American Ball Park", 
"KC":"Kauffman Stadium", "MIA":"Marlins Park", "MIL":"Miller Park", "HOU":"Minute Maid Park", "WAS":"Nationals Park", 
"OAK":"O.co Coliseum", "BAL":"Oriole Park at Camden Yards", "SD":"Petco Park", "PIT":"PNC Park", "CLE":"Progressive Field", "TOR":"Rogers Centre",
"SEA":"Safeco Field", "MIN":"Target Field", "TB":"Tropicana Field", "ATL": "Turner Field", "CWS": "U.S. Cellular Field", "CHC":"Wrigley Field", "NYY":"Yankee Stadium"}

lineup_factor = {"1":1.0, "2":0.978, "3":0.954, "4":0.932, "5":0.912, "6":0.893, "7":0.868, "8":0.843, "9":0.815}

#for batters scoring

#take into account opposing starting pitcher data (history bvp, era vs handedness, whip vs handedness)
#call opposing team starting pitcher
#call their stats

#opposing team defense
#how to take weather into account
weather_url = "http://web.archive.org/web/20160604042517/http://dailybaseballdata.com/cgi-bin/weather.pl"

#wind effects
wind_coefficient = {"N":1.4, "NNE":1.25, "NE":1.15, "ENE":1.05, "E": 1, "ESE":0.95, "SE":0.85, "SSE":0.75, "S":0.6, "SSW":-0.75, "SW":-0.85, "WSW":-0.95, "W":-1, "WNW":-1.05, "NW":-1.15, "NNW":-1.25}
wind_mapping = {"N":1, "NNE":2, "NE":3, "ENE":4, "E": 5, "ESE":6, "SE":7, "SSE":8, "S":9, "SSW":10, "SW":11, "WSW":12, "W":13, "WNW":14, "NW":15, "NNW":16}

stadium_wind_shift = {"Angel Stadium":0, "AT&T Park":0, "Busch Stadium":0, "Chase Field":0, "Citi Field":0, "Citizens Bank Park":0, 
"Comerica Park":0, "Coors Field":0, "Dodger Stadium":0, "Fenway Park":0, "Globe Life Park":0, "Great American Ball Park":0, 
"Guaranteed Rate Field":0, "Kauffman Stadium":0, "Marlins Park":0, "Miller Park":0, "Minute Maid Park":0, "Nationals Park":0, 
"Oakland Coliseum":0, "Camden Yards":0, "Petco Park":0, "PNC Park":0, "Progressive Field":0, "Rogers Centre":0,
"SunTrust Park":0, "Safeco Field":0, "Target Field":0, "Tropicana Field":0, "Wrigley Field":0, "Yankee Stadium":0}

#roof effects 

stadium_has_roof = {"Angel Stadium":0, "AT&T Park":0, "Busch Stadium":0, "Chase Field":1, "Citi Field":0, "Citizens Bank Park":0, 
"Comerica Park":0, "Coors Field":0, "Dodger Stadium":0, "Fenway Park":0, "Globe Life Park":0, "Great American Ball Park":0, 
"Guaranteed Rate Field":0, "Kauffman Stadium":0, "Marlins Park":1, "Miller Park":1, "Minute Maid Park":1, "Nationals Park":0, 
"Oakland Coliseum":0, "Camden Yards":0, "Petco Park":0, "PNC Park":0, "Progressive Field":0, "Rogers Centre":1,
"SunTrust Park":0, "Safeco Field":1, "Target Field":0, "Tropicana Field":1, "Wrigley Field":0, "Yankee Stadium":0}

#temperature effects

temp_high = 90
temp_low = 40

#precipitation effects

#precipitation_coefficient = {"0%":1, "20%":, "35%":, "50%":, "65%":,"75%":, "80%": }

#scrape weather_website for daily weather (not complete yet)
def daily_weather(object):
        
    call_weather_url = urllib.urlopen(object)
    weather_website = call_weather_url.read()    
    soup = BeautifulSoup(weather_website)
    table = soup.findAll('table', {'border':'1'})


#position in the lineup and who is batting before/after them
#is team coming off a day off?
#shift and framing
#park factors

def ballparkfactorsscraper(object):
    data = []
    call_ballparkfactors_url = urllib.urlopen(object)
    ballparkfactors_website = call_ballparkfactors_url.read()	
    soup = BeautifulSoup(ballparkfactors_website)
    call_ballparkfactors_url.close()
    for player in player_list:
        ballpark_data[player.name] = {}
        for h4 in soup.findAll("h4"):    
            counter = 0
            if player.home:
                if h4.text == home_stadium[player.team]:
                    data = h4.parent.next.next.next.next.next.next.next.table.tbody.findAll("td")
            if not player.home:
                if h4.text == home_stadium[player.opposing_team]:
                    data = h4.parent.next.next.next.next.next.next.next.table.tbody.findAll("td")
            if data:
                for number in data:
                    if player.handedness == "R":
                        datapoint = counter - 1
                    if player.handedness == "L":
                        datapoint = counter + 1
                    if player.handedness == "S":
                        datapoint = [counter+1, counter-1]
                    number = str(number).split(">")[1].split("<")[0]
                    if number == "HR":
                        try:
                            ballpark_data[player.name]["HR"] = float(str(data[datapoint]).split(">")[1].split("<")[0])
                        except:
                            ballpark_data[player.name]["HR"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Triples":
                        try:
                            ballpark_data[player.name]["Triples"] = float(str(data[datapoint]).split(">")[1].split("<")[0])
                        except:
                            ballpark_data[player.name]["Triples"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Doubles":
                        try:
                            ballpark_data[player.name]["Doubles"] = float(str(data[datapoint]).split(">")[1].split("<")[0])
                        except:
                            ballpark_data[player.name]["Doubles"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Singles":
                        try:
                            ballpark_data[player.name]["Singles"] = float(str(data[datapoint]).split(">")[1].split("<")[0])
                        except:
                            ballpark_data[player.name]["Singles"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "R":
                        try:
                            ballpark_data[player.name]["R"] = float(str(data[datapoint]).split(">")[1].split("<")[0])
                        except:
                            ballpark_data[player.name]["R"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    counter +=1
              
def SQLExtract():

    with sqlite3.connect('players.sqlite') as conn:
        cur = conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS 'Players'
            (player_name TEXT UNIQUE, 
            player_id TEXT UNIQUE, handedness TEXT);""")
        cur.execute('''SELECT player_name FROM 'Players';''')
        existing_data = cur.fetchall()
        return set([player[0] for player in existing_data])

def lineup_creator(batter_score_list, pitcher_score_list):                    
    '''
    Create lineup based on replacing the player at the position
    currently in the lineup with the lowest delta between highest 
    and second highest scorer with second highest scorer and 
    moving the delta to compare the next highest two players
    until the salary is below the target
    '''

    searching = True
    #catcher, first, second, third, shortstop, outfield1, outfield2, outfield3, pitcher1, pitcher2
    index = [0,0,0,0,0,0,1,2,0,1]
    position_index = [0,1,2,3,4,5,5,5]
    player_roster = [batter_score_list[position_index[i]][index[i]][0] for i in range(8)]

    pitcher_player_roster = [pitcher_score_list[index[i]][0] for i in [8,9]]
    for pitcher in pitcher_player_roster:
        player_roster.append(pitcher)
    
    deltas_up = [0 for i in range(10)]
    deltas_down = [batter_score_list[position_index[i]][index[i]+1][1] - batter_score_list[position_index[i]][index[i]][1] if index[i]+1 < len(batter_score_list[position_index[i]]) else 100 for i in range(8)]
    pitcher_deltas_down = [pitcher_score_list[index[i]+1][1] - pitcher_score_list[index[i]][1] if index[i]+1 < len(pitcher_score_list) else 100 for i in [8,9]]
    for pitcher in pitcher_deltas_down:
        deltas_down.append(pitcher)

    salary = sum([int(player.dksalary) for player in player_roster])

    player_count = 0
    position_count = 0
    for player in player_roster:
        del player_roster[i]
        if player_count < 8:
            while batter_score_list[position_count][index[player_count]][0] in player_roster:
                index[player_count] += 1
            player_roster.insert(player_count, batter_score_list[position_count][index[player_count]][0])

        else:
            while pitcher_score_list[index[player_count]][0] in player_roster:
                index[player_count] += 1
            player_roster.insert(player_count, pitcher_score_list[index[player_count]][0])
        player_count += 1
        if player_count < 6:
            position_count += 1
    for player in player_roster:
        old_roster = player_roster
    def salary_down(deltas, old_roster):
        for i,j in enumerate(deltas):
            if j == min(deltas):
                player = player_roster[i]
                del player_roster[i]
                index[i] += 1
                if i < 8:
                    if index[i] > len(batter_score_list[position_index[i]])-1:
                        index[i] = len(batter_score_list[position_index[i]])-2
                    player = batter_score_list[position_index[i]][index[i]][0]
                else:
                    try:
                        player = pitcher_score_list[index[i]][0]
                    except:
                        player = pitcher_score_list[index[i]-1][0]
                while player in player_roster:
                    index[i] += 1
                    if i < 8:
                        try:
                            player = batter_score_list[position_index[i]][index[i]][0]
                        except:
                            player = batter_score_list[position_index[i]][len(batter_score_list[position_index[i]])-1][0]
                    else:
                        try:
                            player = pitcher_score_list[index[i]][0]
                        except:
                            player = pitcher_score_list[len(pitcher_score_list)-1][0]
                player_roster.insert(i, player)
                salary = sum([int(i.dksalary) for i in player_roster])
                if player_roster == old_roster:
                    searching = False
                else:
                    old_roster = player_roster
    
    def salary_up(deltas):
        for i,j in enumerate(deltas):
            if j == max(deltas):
                player = player_roster[i]
                del player_roster[i]
                index[i] -= 1
                if i < 8:
                    if index[i] < 0:
                        index[i] = 0
                    player = batter_score_list[position_index[i]][index[i]][0]
                else:
                    try:
                        player = pitcher_score_list[index[i]][0]
                    except:
                        player = pitcher_score_list[index[i]+1][0]
                while player in player_roster:
                    index[i] -=  1
                    if i < 8:
                        try:
                            player = batter_score_list[position_index[i]][index[i]][0]
                        except:
                            player = batter_score_list[position_index[i]][index[i]+1][0]
                    else:
                        try:
                            player = pitcher_score_list[index[i]][0]
                        except:
                            player = pitcher_score_list[index[i]+1][0]
                player_roster.insert(i, player)
                salary = sum([int(i.dksalary) for i in player_roster])
                
    
    while searching:
        print "here, searching"
        if salary <= 50000:
            deltas_up = [batter_score_list[position_index[i]][index[i]-1][1] - batter_score_list[position_index[i]][index[i]][1] if index[i] > 0 else 0 for i in range(8)]
            pitcher_deltas_up = [pitcher_score_list[index[i]-1][1] - pitcher_score_list[index[i]][1] if index[i] > 0 else 0 for i in [8,9]]
            for pitcher in pitcher_deltas_up:
                deltas_up.append(pitcher)
            print "here, up"
            if deltas_up[0] == 0 and deltas_up[1] == 0 and deltas_up[2] == 0 and deltas_up[3] == 0 and deltas_up[4] == 0 and deltas_up[5] == 0 and deltas_up[8] == 0:
                searching = False
            else:
                salary_up(deltas_up)
        if salary > 50000:
            deltas_down = [batter_score_list[position_index[i]][index[i]][1] - batter_score_list[position_index[i]][index[i]+1][1] if index[i]+1 < len(batter_score_list[position_index[i]]) else 1000000 for i in range(8)]
            pitcher_deltas_down = [pitcher_score_list[index[i]][1] - pitcher_score_list[index[i]+1][1] if index[i]+1 < len(pitcher_score_list) else 1000000 for i in [8,9]]
            for pitcher in pitcher_deltas_down:
                deltas_down.append(pitcher)        
            print "here, down"
            if deltas_down == [1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000,1000000]:
                searching = False
            else:
                salary_down(deltas_down, old_roster)
    final_score = sum([player.dkscore for player in player_roster])
    player_roster_names = [player.name for player in player_roster]
    return player_roster_names, salary, final_score

#home/road splits - alraedy scraped for in stats
#where they usually hit the ball to
#last 7 days, last 14 days, last 28 days, last 365 days - scraped in stats

#pitchers scoring

#shift and framing
#park factors (see above for batters)
#home/road splits - already scraped for in stats
if __name__ == '__main__':
    
    player_info = {}
    pitchers_hitters = {}
    player_list = []
    contest_players = set()
    existing_data = SQLExtract()
    constructPlayerList()
    for player in player_list:
        if str(player) is not "pitcher":
            for pitcher in pitchers_hitters["Pitcher"]:
                if pitcher.team == player.opposing_team:
                    player.opposing_pitcher = pitcher
        print player.name
        if player.name not in existing_data:
            player.updateSplits()
        if player.opposing_pitcher:
            player.updateBVP()


    ballpark_data = {}
    ballparkfactor_website = "https://swishanalytics.com/partners/mlb/mlb-park-factors.php"
    outfielder_dk_score = {}
    third_basemen_dk_score = {}
    shortstop_dk_score = {}
    second_basemen_dk_score = {}
    first_basemen_dk_score = {}
    catcher_dk_score = {}
    pitcher_dk_score = {}
    ballparkfactorsscraper(ballparkfactor_website)
    # sql_tables = ["{}last7days".format(year), "{}last14days".format(year), "{}last28days".format(year), "{}totals".format(year), "{}vsRHStarter".format(year), "{}vsLHStarter".format(year), "{}hmvis".format(year), "{}bvp".format(year)]

    # sql_tables = ["{}last7days".format(year), "{}last14days".format(year), "{}last28days".format(year), "{}totals".format(year), "{}vsRHStarter".format(year), "{}vsLHStarter".format(year), "{}hmvis".format(year), "{}bvp".format(year)]

    #use SQL data generated from complete_newbr to generate a score for each player

    outfielder_fd_score = {}
    third_basemen_fd_score = {}
    shortstop_fd_score = {}
    second_basemen_fd_score = {}
    first_basemen_fd_score = {}
    catcher_fd_score = {}
    pitcher_fd_score = {}
    batter_fd_score = [catcher_fd_score, first_basemen_fd_score, second_basemen_fd_score, third_basemen_fd_score, shortstop_fd_score, outfielder_fd_score]

    skipped_players = []
    
    years = ["2015", "2016", "2017", "2018"]
    for player in player_list:
        for year in years:
            sql_tables = ["{}last7days".format(year), "{}last14days".format(year), "{}last28days".format(year), "{}totals".format(year), "{}vsRHStarter".format(year), "{}vsLHStarter".format(year), "{}hmvis".format(year), "{}bvp".format(year)]
            for sql_table in sql_tables:
                player.calcDKScore(year, sql_table, ballpark_data, lineup_factor)
            if year == "2017":
                if player.dkdivisor:
                    player.dkscore = player.dkscore/player.dkdivisor
                if str(player) == "catcher":
                    catcher_dk_score[player] = player.dkscore
                elif str(player) == "firstbaseman":
                    first_basemen_dk_score[player] = player.dkscore
                elif str(player) == "secondbaseman":
                    second_basemen_dk_score[player] = player.dkscore
                elif str(player) == "thirdbaseman":
                    third_basemen_dk_score[player] = player.dkscore
                elif str(player) == "shortstop":
                    shortstop_dk_score[player] = player.dkscore
                elif str(player) == "outfielder":
                    outfielder_dk_score[player] = player.dkscore
                elif str(player) == "pitcher":
                    pitcher_dk_score[player] = player.dkscore
                else:
                    continue
    batter_dk_score = [catcher_dk_score, first_basemen_dk_score, second_basemen_dk_score, third_basemen_dk_score, shortstop_dk_score, outfielder_dk_score]
    #sort dictionaries created in scoring above as tuples
    import operator
    index_position_score = 0
    for position_score in batter_dk_score:
        batter_dk_score[index_position_score] = sorted(position_score.items(), key=operator.itemgetter(1), reverse = True)
        index_position_score += 1
    pitcher_dk_score = sorted(pitcher_dk_score.items(), key=operator.itemgetter(1), reverse = True)
    
    print lineup_creator(batter_dk_score, pitcher_dk_score)
    end_time = time.time()
    print('Took %s seconds to calculate.' % (end_time - start_time))



    # csv_from_fanduel = 'FanDuel-MLB-2017-04-03-18431-players-list.csv'
    # fd_player_and_salaries = {}
    # extract_fd_info(csv_from_fanduel)

    # for player_full_name, position in player_and_position.iteritems():
        # fd_score_from_sql(player_full_name, position)

    # #sort dictionaries created in scoring above as tuples
    # import operator
    # index_position_score = 0
    # for position_fd_score in batter_fd_score:
        # batter_fd_score[index_position_score] = sorted(position_fd_score.items(), key=operator.itemgetter(1), reverse = True)
        # index_position_score += 1
    # pitchers_fd_score = sorted(pitcher_fd_score.items(), key=operator.itemgetter(1), reverse = True)
           
    # print lineup_creator(batter_fd_score, pitchers_fd_score, fd_player_and_salaries)
    







